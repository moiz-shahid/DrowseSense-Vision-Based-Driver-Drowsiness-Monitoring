from scipy.spatial import distance
from imutils import face_utils
from pygame import mixer
import imutils
import dlib  #For Pre trained model
import cv2

mixer.init()
mixer.music.load("music.wav")

def eye_aspect_ratio(eye):
        # Calculate the Euclidean distances between specific points on the eye
    A = distance.euclidean(eye[1], eye[5]) # Vertical distance between top and bottom points of the eye
    B = distance.euclidean(eye[2], eye[4]) # Vertical distance between other two points of the eye
    C = distance.euclidean(eye[0], eye[3]) # Horizontal distance between the sides of the eye
# Calculate the Eye Aspect Ratio (EAR) using the distances
# Compute the ratio where A and B are distances between specific landmarks on the eye (like the width or height of the eye).
#C is the distance between two other landmarks on the eye.
    ear = (A + B) / (2.0 * C)  
    return ear    # Return the calculated Eye Aspect Ratio
thresh = 0.25
frame_check = 10
detect = dlib.get_frontal_face_detector()   # used to detect faces in the video frames.
predict = dlib.shape_predictor("shape_predictor_68_face_landmarks.dat")

(lStart, lEnd) = face_utils.FACIAL_LANDMARKS_68_IDXS["left_eye"]
(rStart, rEnd) = face_utils.FACIAL_LANDMARKS_68_IDXS["right_eye"]
cap = cv2.VideoCapture(0)
flag = 0

while True:
    ret, frame = cap.read()  # Capture a frame from the webcam
    frame = imutils.resize(frame, width=450)
    gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)
    subjects = detect(gray, 0)

    for subject in subjects:
        shape = predict(gray, subject)  # Predict facial landmarks using the shape predictor
        shape = face_utils.shape_to_np(shape)  # Convert the predicted shape to a NumPy array
        
        leftEye = shape[lStart:lEnd]  # Extract landmarks for the left eye
        rightEye = shape[rStart:rEnd]  # Extract landmarks for the right eye
        
        leftEAR = eye_aspect_ratio(leftEye)  # Calculate the Eye Aspect Ratio (EAR) for the left eye
        rightEAR = eye_aspect_ratio(rightEye)  # Calculate the EAR for the right eye
        ear = (leftEAR + rightEAR) / 2.0  # Calculate the average EAR for both eyes
        
        leftEyeHull = cv2.convexHull(leftEye)  # Create a convex hull around the left eye landmarks
        rightEyeHull = cv2.convexHull(rightEye)  # Create a convex hull around the right eye landmarks
        
        cv2.drawContours(frame, [leftEyeHull], -1, (0, 255, 0), 1)  # Draw the left eye contour on the frame
        cv2.drawContours(frame, [rightEyeHull], -1, (0, 255, 0), 1)  # Draw the right eye contour on the frame
        if ear < thresh:
            flag += 1
            print(flag)
            if flag >= frame_check:
                cv2.putText(frame, "****************ALERT!****************", (10, 30),
                            cv2.FONT_HERSHEY_SIMPLEX, 0.7, (0, 0, 255), 2)
                cv2.putText(frame, "****************ALERT!****************", (10, 325),
                            cv2.FONT_HERSHEY_SIMPLEX, 0.7, (0, 0, 255), 2)
                mixer.music.play()
        else:
            flag = 0

    cv2.imshow("Frame", frame)
    key = cv2.waitKey(1) & 0xFF
    if key == ord("q"):
        break

cv2.destroyAllWindows()
cap.release()



